{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\vblas\\\\Desktop\\\\COLLEGE\\\\Year 3\\\\Web App 2\\\\wad2-Assignment2\\\\moviesApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\vblas\\\\Desktop\\\\COLLEGE\\\\Year 3\\\\Web App 2\\\\wad2-Assignment2\\\\moviesApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\vblas\\\\Desktop\\\\COLLEGE\\\\Year 3\\\\Web App 2\\\\wad2-Assignment2\\\\moviesApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport * as React from 'react';\nimport { createContext, useContext, createElement } from 'react';\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nvar RADIO_INPUT = 'radio';\nvar UNDEFINED = 'undefined';\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nfunction attachEventListeners({\n  field,\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  var ref = field.ref;\n\n  if (!ref.addEventListener) {\n    return;\n  }\n\n  ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n  ref.addEventListener(EVENTS.BLUR, handleChange);\n}\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nvar isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar reIsPlainProp = /^\\w*$/;\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g;\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\nfunction isIndex(value) {\n  return reIsUint.test(value) && value > -1;\n}\n\nfunction isKey(value) {\n  if (isArray(value)) {\n    return false;\n  }\n\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value);\n}\n\nvar stringToPath = string => {\n  var result = [];\n  string.replace(rePropName, (match, number, quote, string) => {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : isIndex(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar combineFieldValues = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (!!key.match(/\\[.+\\]/gi) || key.indexOf('.') > 0) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (!ref.removeEventListener) {\n    return;\n  }\n\n  ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n  ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n  ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n};\n\nvar isRadioInput = type => type === RADIO_INPUT;\n\nvar isCheckBoxInput = type => type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  var ref = field.ref,\n      mutationWatcher = field.mutationWatcher;\n\n  if (!ref.type || !fields[ref.name]) {\n    return;\n  }\n\n  var name = ref.name,\n      type = ref.type;\n  var fieldValue = fields[name];\n\n  if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\n    var options = fieldValue.options;\n\n    if (isArray(options) && options.length) {\n      options.forEach(({\n        ref\n      }, index) => {\n        var option = options[index];\n\n        if (option && isDetached(ref) || forceDelete) {\n          var _mutationWatcher = option.mutationWatcher;\n          removeAllEventListeners(option, handleChange);\n\n          if (_mutationWatcher) {\n            _mutationWatcher.disconnect();\n          }\n\n          options.splice(index, 1);\n        }\n      });\n\n      if (options && !options.length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isMultipleSelect = type => type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  var type = ref.type,\n      name = ref.name,\n      options = ref.options,\n      value = ref.value,\n      files = ref.files;\n  var field = fields[name];\n\n  if (type === 'file') {\n    return files;\n  }\n\n  if (isRadioInput(type)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(type)) {\n    return getMultipleSelectValue(options);\n  }\n\n  if (isCheckBoxInput(type)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar getFieldsValues = fields => Object.values(fields).reduce((previous, {\n  ref,\n  ref: {\n    name\n  }\n}) => Object.assign(Object.assign({}, previous), {\n  [name]: getFieldValue(fields, ref)\n}), {});\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar isSameError = (error, type, message) => isObject(error) && error.type === type && error.message === message;\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  var isFieldValid = isEmptyObject(error);\n  var isFormValid = isEmptyObject(errors);\n  var currentFieldError = error[name];\n  var existFieldError = errors[name];\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError.type, currentFieldError.message);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  var isPureObject = isObject(validationData) && !isRegex(validationData);\n  return {\n    value: isPureObject ? validationData.value : validationData,\n    message: isPureObject ? validationData.message : ''\n  };\n};\n\nvar isString = value => typeof value === 'string';\n\nvar displayNativeError = (nativeValidation, ref, message) => {\n  if (nativeValidation && isString(message)) {\n    ref.setCustomValidity(message);\n  }\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, nativeError, type = 'validate') {\n  var isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    var message = isStringValue ? result : '';\n    var error = {\n      type,\n      message,\n      ref\n    };\n    nativeError(message);\n    return error;\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  var error = errors[name];\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n      [type]: message || true\n    })\n  });\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fieldsRef, nativeValidation, validateAllFieldCriteria, {\n    ref,\n    ref: {\n      type,\n      value,\n      name,\n      valueAsNumber,\n      valueAsDate\n    },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate\n  }) {\n    var fields, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, nativeError, appendErrorsCurry, message, exceedMax, exceedMin, _getValueAndMessage, maxValue, maxMessage, _getValueAndMessage2, minValue, minMessage, valueNumber, valueDate, _message, _getValueAndMessage3, maxLengthValue, maxLengthMessage, _getValueAndMessage4, minLengthValue, minLengthMessage, inputLength, _exceedMax, _exceedMin, _message2, _getValueAndMessage5, patternValue, patternMessage, fieldValue, validateRef, result, validateError, validateFunctions, validationResult;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fields = fieldsRef.current;\n            error = {};\n            isRadio = isRadioInput(type);\n            isCheckBox = isCheckBoxInput(type);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = isEmptyString(value);\n            nativeError = displayNativeError.bind(null, nativeValidation, ref);\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context2.next = 14;\n              break;\n            }\n\n            message = isString(required) ? required : getValueAndMessage(required).message;\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message,\n              ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n            nativeError(message);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 14;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 14:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context2.next = 24;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(max), maxValue = _getValueAndMessage.value, maxMessage = _getValueAndMessage.message;\n            _getValueAndMessage2 = getValueAndMessage(min), minValue = _getValueAndMessage2.value, minMessage = _getValueAndMessage2.message;\n\n            if (type === 'number') {\n              valueNumber = valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxValue)) {\n                exceedMax = valueNumber > maxValue;\n              }\n\n              if (!isNullOrUndefined(minValue)) {\n                exceedMin = valueNumber < minValue;\n              }\n            } else {\n              valueDate = valueAsDate || new Date(value);\n\n              if (isString(maxValue)) {\n                exceedMax = valueDate > new Date(maxValue);\n              }\n\n              if (isString(minValue)) {\n                exceedMin = valueDate < new Date(minValue);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context2.next = 24;\n              break;\n            }\n\n            _message = exceedMax ? maxMessage : minMessage;\n            error[name] = Object.assign({\n              type: exceedMax ? INPUT_VALIDATION_RULES.max : INPUT_VALIDATION_RULES.min,\n              message: _message,\n              ref\n            }, exceedMax ? appendErrorsCurry(INPUT_VALIDATION_RULES.max, _message) : appendErrorsCurry(INPUT_VALIDATION_RULES.min, _message));\n            nativeError(_message);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 24;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 24:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context2.next = 36;\n              break;\n            }\n\n            _getValueAndMessage3 = getValueAndMessage(maxLength), maxLengthValue = _getValueAndMessage3.value, maxLengthMessage = _getValueAndMessage3.message;\n            _getValueAndMessage4 = getValueAndMessage(minLength), minLengthValue = _getValueAndMessage4.value, minLengthMessage = _getValueAndMessage4.message;\n            inputLength = value.toString().length;\n            _exceedMax = maxLength && inputLength > maxLengthValue;\n            _exceedMin = minLength && inputLength < minLengthValue;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context2.next = 36;\n              break;\n            }\n\n            _message2 = _exceedMax ? maxLengthMessage : minLengthMessage;\n            error[name] = Object.assign({\n              type: _exceedMax ? INPUT_VALIDATION_RULES.maxLength : INPUT_VALIDATION_RULES.minLength,\n              message: _message2,\n              ref\n            }, _exceedMax ? appendErrorsCurry(INPUT_VALIDATION_RULES.maxLength, _message2) : appendErrorsCurry(INPUT_VALIDATION_RULES.minLength, _message2));\n            nativeError(_message2);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 36;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 36:\n            if (!(pattern && !isEmpty)) {\n              _context2.next = 43;\n              break;\n            }\n\n            _getValueAndMessage5 = getValueAndMessage(pattern), patternValue = _getValueAndMessage5.value, patternMessage = _getValueAndMessage5.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context2.next = 43;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: patternMessage,\n              ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n            nativeError(patternMessage);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 43;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 43:\n            if (!validate) {\n              _context2.next = 66;\n              break;\n            }\n\n            fieldValue = getFieldValue(fields, ref);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context2.next = 57;\n              break;\n            }\n\n            _context2.next = 49;\n            return validate(fieldValue);\n\n          case 49:\n            result = _context2.sent;\n            validateError = getValidateError(result, validateRef, nativeError);\n\n            if (!validateError) {\n              _context2.next = 55;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 55;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 55:\n            _context2.next = 66;\n            break;\n\n          case 57:\n            if (!isObject(validate)) {\n              _context2.next = 66;\n              break;\n            }\n\n            validateFunctions = Object.entries(validate);\n            _context2.next = 61;\n            return new Promise(resolve => {\n              validateFunctions.reduce( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(previous, [key, validate], index) {\n                  var result, validateResult, validateError;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.t2 = isEmptyObject;\n                          _context.next = 3;\n                          return previous;\n\n                        case 3:\n                          _context.t3 = _context.sent;\n                          _context.t1 = !(0, _context.t2)(_context.t3);\n\n                          if (!_context.t1) {\n                            _context.next = 7;\n                            break;\n                          }\n\n                          _context.t1 = !validateAllFieldCriteria;\n\n                        case 7:\n                          _context.t0 = _context.t1;\n\n                          if (_context.t0) {\n                            _context.next = 10;\n                            break;\n                          }\n\n                          _context.t0 = !isFunction(validate);\n\n                        case 10:\n                          if (!_context.t0) {\n                            _context.next = 12;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", resolve(previous));\n\n                        case 12:\n                          _context.next = 14;\n                          return validate(fieldValue);\n\n                        case 14:\n                          validateResult = _context.sent;\n                          validateError = getValidateError(validateResult, validateRef, nativeError, key);\n\n                          if (validateError) {\n                            result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n                            if (validateAllFieldCriteria) {\n                              error[name] = result;\n                            }\n                          } else {\n                            result = previous;\n                          }\n\n                          return _context.abrupt(\"return\", validateFunctions.length - 1 === index ? resolve(result) : result);\n\n                        case 18:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x5, _x6, _x7) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), {});\n            });\n\n          case 61:\n            validationResult = _context2.sent;\n\n            if (isEmptyObject(validationResult)) {\n              _context2.next = 66;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context2.next = 66;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 66:\n            if (nativeValidation) {\n              ref.setCustomValidity('');\n            }\n\n            return _context2.abrupt(\"return\", error);\n\n          case 68:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nfunction validateWithSchema(_x8, _x9, _x10, _x11) {\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction _validateWithSchema() {\n  _validateWithSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(validationSchema, validationSchemaOption, validateAllFieldCriteria, data) {\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return validationSchema.validate(data, validationSchemaOption);\n\n          case 3:\n            _context10.t0 = _context10.sent;\n            _context10.t1 = {};\n            return _context10.abrupt(\"return\", {\n              values: _context10.t0,\n              errors: _context10.t1\n            });\n\n          case 8:\n            _context10.prev = 8;\n            _context10.t2 = _context10[\"catch\"](0);\n            return _context10.abrupt(\"return\", {\n              values: {},\n              errors: parseErrorSchema(_context10.t2, validateAllFieldCriteria)\n            });\n\n          case 11:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[0, 8]]);\n  }));\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction attachNativeValidation(ref, rules) {\n  Object.entries(rules).forEach(([key, ruleValue]) => {\n    var _getValueAndMessage6 = getValueAndMessage(ruleValue),\n        value = _getValueAndMessage6.value;\n\n    if (key === INPUT_VALIDATION_RULES.pattern && isRegex(value)) {\n      ref[key] = value.source;\n    } else {\n      ref[key] = key === INPUT_VALIDATION_RULES.pattern || value;\n    }\n  });\n}\n\nvar get = (obj, path, defaultValue) => {\n  var result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? defaultValue : result;\n};\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n\nfunction flatArray(list) {\n  return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nvar getPath = (path, values) => isArray(values) ? values.map((item, index) => {\n  var pathWithIndex = \"\".concat(path, \"[\").concat(index, \"]\");\n  return isPrimitive(item) ? pathWithIndex : getPath(pathWithIndex, item);\n}) : Object.entries(values).map(([key, objectValue]) => {\n  var pathWithKey = \"\".concat(path, \".\").concat(key);\n  return isPrimitive(objectValue) ? pathWithKey : getPath(pathWithKey, objectValue);\n});\n\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\n  var value;\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    watchFields.add(fieldName);\n    value = fieldValues[fieldName];\n  } else {\n    value = get(combineFieldValues(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar omitValidFields = (errorFields, validFieldNames) => Object.entries(errorFields).reduce((previous, [name, error]) => validFieldNames.some(validFieldName => validFieldName === name) ? previous : Object.assign(Object.assign({}, previous), {\n  [name]: error\n}), {});\n\nfunction onDomRemove(element, onDetachCallback) {\n  var observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar omitObject = (obj, key) => {\n  var _a = key,\n      omitted = obj[_a],\n      rest = __rest(obj, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n\n  return rest;\n};\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nvar useRef = React.useRef,\n    useState = React.useState,\n    useCallback = React.useCallback,\n    useEffect = React.useEffect;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  defaultValues = {},\n  nativeValidation = false,\n  submitFocusError = true,\n  validationSchemaOption = {\n    abortEarly: false\n  },\n  validateCriteriaMode\n} = {}) {\n  var fieldsRef = useRef({});\n  var validateAllFieldCriteria = validateCriteriaMode === 'all';\n  var errorsRef = useRef({});\n  var touchedFieldsRef = useRef(new Set());\n  var watchFieldsRef = useRef(new Set());\n  var dirtyFieldsRef = useRef(new Set());\n  var fieldsWithValidationRef = useRef(new Set());\n  var validFieldsRef = useRef(new Set());\n  var isValidRef = useRef(true);\n  var defaultRenderValuesRef = useRef({});\n  var defaultValuesRef = useRef(defaultValues);\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var isSubmittedRef = useRef(false);\n  var isDirtyRef = useRef(false);\n  var submitCountRef = useRef(0);\n  var isSubmittingRef = useRef(false);\n  var handleChange = useRef();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      render = _useState2[1];\n\n  var _useRef$current = useRef(modeChecker(mode)).current,\n      isOnBlur = _useRef$current.isOnBlur,\n      isOnSubmit = _useRef$current.isOnSubmit;\n  var isWindowUndefined = typeof window === UNDEFINED;\n  var isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  var isProxyEnabled = !isWindowUndefined && 'Proxy' in window;\n  var readFormState = useRef({\n    dirty: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  var _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n      isReValidateOnBlur = _useRef$current2.isOnBlur,\n      isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  var validationSchemaOptionRef = useRef(validationSchemaOption);\n  defaultValuesRef.current = defaultValuesRef.current ? defaultValuesRef.current : defaultValues;\n\n  var combineErrorsRef = data => Object.assign(Object.assign({}, errorsRef.current), data);\n\n  var reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  var validateFieldCurry = useCallback(validateField.bind(null, fieldsRef, nativeValidation, validateAllFieldCriteria), []);\n  var validateFieldsSchemaCurry = useCallback(validateWithSchema.bind(null, validationSchema, validationSchemaOptionRef.current, validateAllFieldCriteria), [validationSchema]);\n  var renderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\n    var shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || validationSchema) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || errorsRef.current[name];\n      }\n\n      errorsRef.current = omitObject(errorsRef.current, name);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !errorsRef.current[name];\n    }\n\n    errorsRef.current = combineErrorsRef(error);\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, validationSchema]);\n  var setFieldValue = useCallback((name, rawValue) => {\n    var field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    var ref = field.ref;\n    var type = ref.type;\n    var options = field.options;\n    var value = isWeb && ref instanceof window.HTMLElement && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(type) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isMultipleSelect(type)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(type) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return type;\n  }, [isWeb]);\n\n  var setDirty = name => {\n    if (!fieldsRef.current[name]) {\n      return false;\n    }\n\n    var isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n    var isDirtyChanged = dirtyFieldsRef.current.has(name) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = !!dirtyFieldsRef.current.size;\n    return isDirtyChanged && readFormState.current.dirty;\n  };\n\n  var setInternalValue = useCallback((name, value) => {\n    setFieldValue(name, value);\n\n    if (setDirty(name) || !touchedFieldsRef.current.has(name) && readFormState.current.touched) {\n      return !!touchedFieldsRef.current.add(name);\n    }\n  }, [setFieldValue]);\n  var executeValidation = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3({\n      name,\n      value\n    }, shouldRender, skipReRender) {\n      var field, error;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              field = fieldsRef.current[name];\n\n              if (field) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", false);\n\n            case 3:\n              if (!isUndefined(value)) {\n                setInternalValue(name, value);\n              }\n\n              if (shouldRender) {\n                reRender();\n              }\n\n              _context3.next = 7;\n              return validateField(fieldsRef, nativeValidation, validateAllFieldCriteria, field);\n\n            case 7:\n              error = _context3.sent;\n              renderBaseOnError(name, error, false, skipReRender);\n              return _context3.abrupt(\"return\", isEmptyObject(error));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x12, _x13, _x14) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [nativeValidation, reRender, renderBaseOnError, setInternalValue, validateAllFieldCriteria]);\n  var executeSchemaValidation = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload, shouldRender) {\n      var _yield$validateWithSc, errors, isMultipleFields, names, validFieldNames, previousFormIsValid, fieldName;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return validateWithSchema(validationSchema, validationSchemaOptionRef.current, validateAllFieldCriteria, combineFieldValues(getFieldsValues(fieldsRef.current)));\n\n            case 2:\n              _yield$validateWithSc = _context4.sent;\n              errors = _yield$validateWithSc.errors;\n              isMultipleFields = isArray(payload);\n              names = isArray(payload) ? payload.map(({\n                name\n              }) => name) : [payload.name];\n              validFieldNames = names.filter(name => !errors[name]);\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(errors);\n\n              if (isMultipleFields) {\n                errorsRef.current = omitValidFields(combineErrorsRef(Object.entries(errors).filter(([key]) => names.includes(key)).reduce((previous, [name, error]) => Object.assign(Object.assign({}, previous), {\n                  [name]: error\n                }), {})), validFieldNames);\n                reRender();\n              } else {\n                fieldName = names[0];\n                renderBaseOnError(fieldName, errors[fieldName] ? {\n                  [fieldName]: errors[fieldName]\n                } : {}, shouldRender || previousFormIsValid !== isValidRef.current);\n              }\n\n              return _context4.abrupt(\"return\", isEmptyObject(errorsRef.current));\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x15, _x16) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [reRender, renderBaseOnError, validateAllFieldCriteria, validationSchema]);\n  var triggerValidation = useCallback( /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(payload, shouldRender) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              fields = payload || Object.keys(fieldsRef.current).map(name => ({\n                name\n              }));\n\n              if (!validationSchema) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", executeSchemaValidation(fields, shouldRender));\n\n            case 3:\n              if (!isArray(fields)) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 6;\n              return Promise.all(fields.map( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data) {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return executeValidation(data, false, true);\n\n                        case 2:\n                          return _context5.abrupt(\"return\", _context5.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x19) {\n                  return _ref6.apply(this, arguments);\n                };\n              }()));\n\n            case 6:\n              result = _context6.sent;\n              reRender();\n              return _context6.abrupt(\"return\", result.every(Boolean));\n\n            case 9:\n              _context6.next = 11;\n              return executeValidation(fields, shouldRender);\n\n            case 11:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x17, _x18) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [executeSchemaValidation, executeValidation, reRender, validationSchema]);\n  var setValue = useCallback((name, value, shouldValidate) => {\n    var shouldRender = setInternalValue(name, value) || isWatchAllRef.current || watchFieldsRef.current.has(name);\n\n    if (shouldValidate) {\n      return triggerValidation({\n        name\n      }, shouldRender);\n    }\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    return;\n  }, [reRender, setInternalValue, triggerValidation]);\n  handleChange.current = handleChange.current ? handleChange.current : /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7({\n      type,\n      target\n    }) {\n      var name, fields, errors, field, currentError, error, isBlurEvent, shouldSkipValidation, shouldUpdateDirty, shouldUpdateState, _yield$validateWithSc2, _errors, validForm;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              name = target ? target.name : '';\n              fields = fieldsRef.current;\n              errors = errorsRef.current;\n              field = fields[name];\n              currentError = errors[name];\n\n              if (field) {\n                _context7.next = 7;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 7:\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmittedRef.current || isOnBlur && !isBlurEvent && !currentError || isReValidateOnBlur && !isBlurEvent && currentError || isReValidateOnSubmit && currentError;\n              shouldUpdateDirty = setDirty(name);\n              shouldUpdateState = isWatchAllRef.current || watchFieldsRef.current.has(name) || shouldUpdateDirty;\n\n              if (isBlurEvent && !touchedFieldsRef.current.has(name) && readFormState.current.touched) {\n                touchedFieldsRef.current.add(name);\n                shouldUpdateState = true;\n              }\n\n              if (!shouldSkipValidation) {\n                _context7.next = 14;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", shouldUpdateState && reRender());\n\n            case 14:\n              if (!validationSchema) {\n                _context7.next = 25;\n                break;\n              }\n\n              _context7.next = 17;\n              return validateWithSchema(validationSchema, validationSchemaOptionRef.current, validateAllFieldCriteria, combineFieldValues(getFieldsValues(fields)));\n\n            case 17:\n              _yield$validateWithSc2 = _context7.sent;\n              _errors = _yield$validateWithSc2.errors;\n              validForm = isEmptyObject(_errors);\n              error = _errors[name] ? {\n                [name]: _errors[name]\n              } : {};\n\n              if (isValidRef.current !== validForm) {\n                shouldUpdateState = true;\n              }\n\n              isValidRef.current = validForm;\n              _context7.next = 28;\n              break;\n\n            case 25:\n              _context7.next = 27;\n              return validateField(fieldsRef, nativeValidation, validateAllFieldCriteria, field);\n\n            case 27:\n              error = _context7.sent;\n\n            case 28:\n              if (!renderBaseOnError(name, error) && shouldUpdateState) {\n                reRender();\n              }\n\n            case 29:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x20) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var validateSchemaIsValid = useCallback(() => {\n    var fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateFieldsSchemaCurry(combineFieldValues(fieldValues)).then(({\n      errors\n    }) => {\n      var previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid && previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, [reRender, validateFieldsSchemaCurry]);\n  var resetFieldRef = useCallback(name => {\n    errorsRef.current = omitObject(errorsRef.current, name);\n    fieldsRef.current = omitObject(fieldsRef.current, name);\n    defaultRenderValuesRef.current = omitObject(defaultRenderValuesRef.current, name);\n    [touchedFieldsRef, dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormState.current.isValid || readFormState.current.touched) {\n      reRender();\n    }\n\n    if (validationSchema) {\n      validateSchemaIsValid();\n    }\n  }, [reRender]);\n  var removeEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field) {\n      return;\n    }\n\n    if (!isUndefined(handleChange.current)) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChange.current, field, forceDelete);\n    }\n\n    resetFieldRef(field.ref.name);\n  }, [resetFieldRef]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      (isArray(name) ? name : [name]).forEach(fieldName => errorsRef.current = omitObject(errorsRef.current, fieldName));\n    }\n\n    reRender();\n  }\n\n  var setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    var errors = errorsRef.current;\n    var field = fieldsRef.current[name];\n\n    if (!isSameError(errors[name], type, message)) {\n      errors[name] = {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      };\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    var combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValues) ? {} : defaultValues : defaultValue;\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    var watchFields = watchFieldsRef.current;\n\n    if (isProxyEnabled) {\n      readFormState.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => {\n        var value;\n\n        if (isEmptyObject(fieldsRef.current) && isObject(combinedDefaultValues)) {\n          value = getDefaultValue(combinedDefaultValues, name);\n        } else {\n          value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\n        }\n\n        return Object.assign(Object.assign({}, previous), {\n          [name]: value\n        });\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    return !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValues;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      return console.warn('Missing name @', ref);\n    }\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\n    var currentField = fields[name];\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      var mutationWatcher = onDomRemove(ref, () => removeEventListenerAndRef(fieldAttributes));\n\n      if (isRadioOrCheckbox) {\n        currentField = Object.assign({\n          options: [...(currentField && currentField.options || []), {\n            ref,\n            mutationWatcher\n          }],\n          ref: {\n            type,\n            name\n          }\n        }, validateOptions);\n      } else {\n        currentField = Object.assign(Object.assign({}, fieldAttributes), {\n          mutationWatcher\n        });\n      }\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      var defaultValue = getDefaultValue(defaultValuesRef.current, name);\n\n      if (!isUndefined(defaultValue)) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (validationSchema) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormState.current.isValid) {\n        validateFieldCurry(currentField).then(error => {\n          var previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name]) {\n      defaultRenderValuesRef.current[name] = getFieldValue(fields, currentField.ref);\n    }\n\n    if (!type) {\n      return;\n    }\n\n    var fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n\n    if (nativeValidation && validateOptions) {\n      attachNativeValidation(ref, validateOptions);\n    } else {\n      attachEventListeners({\n        field: fieldToAttachListener,\n        isRadioOrCheckbox,\n        handleChange: handleChange.current\n      });\n    }\n  }\n\n  function register(refOrValidateRule, validationOptions) {\n    if (isWindowUndefined || !refOrValidateRule) {\n      return;\n    }\n\n    if (validationOptions && isString(validationOptions.name)) {\n      registerFieldsRef({\n        name: validationOptions.name\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidateRule) && 'name' in refOrValidateRule) {\n      registerFieldsRef(refOrValidateRule, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidateRule);\n  }\n\n  var handleSubmit = useCallback(callback => /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(e) {\n      var fieldErrors, fieldValues, fields, _yield$validateFields, errors, values, _yield$Object$values$, _errors2, _values;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (e) {\n                e.preventDefault();\n                e.persist();\n              }\n\n              fields = fieldsRef.current;\n\n              if (readFormState.current.isSubmitting) {\n                isSubmittingRef.current = true;\n                reRender();\n              }\n\n              _context9.prev = 3;\n\n              if (!validationSchema) {\n                _context9.next = 16;\n                break;\n              }\n\n              fieldValues = getFieldsValues(fields);\n              _context9.next = 8;\n              return validateFieldsSchemaCurry(combineFieldValues(fieldValues));\n\n            case 8:\n              _yield$validateFields = _context9.sent;\n              errors = _yield$validateFields.errors;\n              values = _yield$validateFields.values;\n              errorsRef.current = errors;\n              fieldErrors = errors;\n              fieldValues = values;\n              _context9.next = 23;\n              break;\n\n            case 16:\n              _context9.next = 18;\n              return Object.values(fields).reduce( /*#__PURE__*/function () {\n                var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(previous, field) {\n                  var resolvedPrevious, ref, name, fieldError;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          if (field) {\n                            _context8.next = 2;\n                            break;\n                          }\n\n                          return _context8.abrupt(\"return\", previous);\n\n                        case 2:\n                          _context8.next = 4;\n                          return previous;\n\n                        case 4:\n                          resolvedPrevious = _context8.sent;\n                          ref = field.ref, name = field.ref.name;\n\n                          if (fields[name]) {\n                            _context8.next = 8;\n                            break;\n                          }\n\n                          return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                        case 8:\n                          _context8.next = 10;\n                          return validateFieldCurry(field);\n\n                        case 10:\n                          fieldError = _context8.sent;\n\n                          if (!fieldError[name]) {\n                            _context8.next = 15;\n                            break;\n                          }\n\n                          resolvedPrevious.errors = Object.assign(Object.assign({}, resolvedPrevious.errors), fieldError);\n                          validFieldsRef.current.delete(name);\n                          return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                        case 15:\n                          if (fieldsWithValidationRef.current.has(name)) {\n                            validFieldsRef.current.add(name);\n                          }\n\n                          resolvedPrevious.values[name] = getFieldValue(fields, ref);\n                          return _context8.abrupt(\"return\", Promise.resolve(resolvedPrevious));\n\n                        case 18:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n\n                return function (_x22, _x23) {\n                  return _ref9.apply(this, arguments);\n                };\n              }(), Promise.resolve({\n                errors: {},\n                values: {}\n              }));\n\n            case 18:\n              _yield$Object$values$ = _context9.sent;\n              _errors2 = _yield$Object$values$.errors;\n              _values = _yield$Object$values$.values;\n              fieldErrors = _errors2;\n              fieldValues = _values;\n\n            case 23:\n              if (!isEmptyObject(fieldErrors)) {\n                _context9.next = 29;\n                break;\n              }\n\n              errorsRef.current = {};\n              _context9.next = 27;\n              return callback(combineFieldValues(fieldValues), e);\n\n            case 27:\n              _context9.next = 31;\n              break;\n\n            case 29:\n              if (submitFocusError) {\n                Object.keys(fieldErrors).reduce((previous, current) => {\n                  var field = fields[current];\n\n                  if (field && previous) {\n                    if (field.ref.focus) {\n                      field.ref.focus();\n                      return false;\n                    } else if (field.options) {\n                      field.options[0].ref.focus();\n                      return false;\n                    }\n                  }\n\n                  return previous;\n                }, true);\n              }\n\n              errorsRef.current = fieldErrors;\n\n            case 31:\n              _context9.prev = 31;\n              isSubmittedRef.current = true;\n              isSubmittingRef.current = false;\n              submitCountRef.current = submitCountRef.current + 1;\n              reRender();\n              return _context9.finish(31);\n\n            case 37:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[3,, 31, 37]]);\n    }));\n\n    return function (_x21) {\n      return _ref8.apply(this, arguments);\n    };\n  }(), [reRender, submitFocusError, validateFieldCurry, validateFieldsSchemaCurry, validationSchema]);\n\n  var resetRefs = () => {\n    errorsRef.current = {};\n    fieldsRef.current = {};\n    validFieldsRef.current = new Set();\n    fieldsWithValidationRef.current = new Set();\n    defaultRenderValuesRef.current = {};\n    touchedFieldsRef.current = new Set();\n    watchFieldsRef.current = new Set();\n    dirtyFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    isValidRef.current = true;\n    submitCountRef.current = 0;\n  };\n\n  var reset = useCallback(values => {\n    var fieldsKeyValue = Object.entries(fieldsRef.current);\n\n    for (var _i = 0, _fieldsKeyValue = fieldsKeyValue; _i < _fieldsKeyValue.length; _i++) {\n      var _fieldsKeyValue$_i = _slicedToArray(_fieldsKeyValue[_i], 2),\n          value = _fieldsKeyValue$_i[1];\n\n      if (value && value.ref && value.ref.closest) {\n        try {\n          value.ref.closest('form').reset();\n          break;\n        } catch (_a) {}\n      }\n    }\n\n    resetRefs();\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    reRender();\n  }, [reRender]);\n  var getValues = useCallback(payload => {\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    var outputValues = isEmptyObject(fieldValues) ? defaultValues : fieldValues;\n    return payload && payload.nest ? combineFieldValues(outputValues) : outputValues;\n  }, [defaultValues]);\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && Object.values(fieldsRef.current).forEach(field => removeEventListenerAndRef(field, true));\n  }, [removeEventListenerAndRef]);\n\n  if (!validationSchema) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  var formState = {\n    dirty: isDirtyRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: [...touchedFieldsRef.current],\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isEmptyObject(fieldsRef.current) || isValidRef.current\n  };\n  return {\n    register: useCallback(register, [defaultRenderValuesRef.current, defaultValuesRef.current]),\n    unregister: useCallback(unregister, [removeEventListenerAndRef]),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    handleSubmit,\n    watch,\n    reset,\n    setValue,\n    triggerValidation,\n    getValues,\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormState.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n\nvar FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(props) {\n  var children = props.children,\n      formState = props.formState,\n      errors = props.errors,\n      restMethods = __rest(props, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nexport default useForm;\nexport { FormContext, useFormContext };","map":{"version":3,"sources":["C:/Users/vblas/Desktop/COLLEGE/Year 3/Web App 2/wad2-Assignment2/moviesApp/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["React","createContext","useContext","createElement","VALIDATION_MODE","onBlur","onChange","onSubmit","RADIO_INPUT","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","reIsDeepProp","reIsPlainProp","rePropName","reEscapeChar","reIsUint","isIndex","test","isKey","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","combineFieldValues","data","Object","entries","reduce","previous","indexOf","assign","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","type","isCheckBoxInput","isDetached","element","HTMLElement","nodeType","Node","DOCUMENT_NODE","parentNode","findRemovedFieldAndRemoveListener","fields","forceDelete","mutationWatcher","name","fieldValue","options","forEach","option","disconnect","splice","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","filter","selected","map","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","getFieldsValues","isEmptyObject","keys","isSameError","error","message","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isString","displayNativeError","nativeValidation","setCustomValidity","isFunction","isBoolean","getValidateError","nativeError","isStringValue","appendErrors","validateAllFieldCriteria","types","validateField","fieldsRef","valueAsNumber","valueAsDate","current","isRadio","isCheckBox","isEmpty","bind","appendErrorsCurry","maxValue","maxMessage","minValue","minMessage","valueNumber","parseFloat","exceedMax","exceedMin","valueDate","Date","maxLengthValue","maxLengthMessage","minLengthValue","minLengthMessage","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validateFunctions","Promise","resolve","validateResult","validationResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationSchemaOption","attachNativeValidation","rules","ruleValue","source","get","obj","defaultValue","split","Boolean","getDefaultValue","defaultValues","flatArray","list","a","b","concat","isPrimitive","getPath","item","pathWithIndex","objectValue","pathWithKey","getPath$1","parentPath","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","omitValidFields","errorFields","validFieldNames","some","validFieldName","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","__rest","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","omitObject","_a","omitted","rest","modeChecker","mode","isOnSubmit","isOnBlur","isOnChange","useRef","useState","useCallback","useEffect","useForm","reValidateMode","submitFocusError","abortEarly","validateCriteriaMode","errorsRef","touchedFieldsRef","Set","watchFieldsRef","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","render","isWindowUndefined","isWeb","isProxyEnabled","readFormState","dirty","isSubmitted","submitCount","touched","isSubmitting","isReValidateOnBlur","isReValidateOnSubmit","validationSchemaOptionRef","combineErrorsRef","reRender","validateFieldCurry","validateFieldsSchemaCurry","renderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isDirty","isDirtyChanged","size","setInternalValue","executeValidation","executeSchemaValidation","payload","isMultipleFields","names","previousFormIsValid","triggerValidation","all","every","setValue","shouldValidate","target","currentError","isBlurEvent","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validForm","validateSchemaIsValid","then","resetFieldRef","removeEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","find","fieldToAttachListener","register","refOrValidateRule","validationOptions","handleSubmit","callback","preventDefault","persist","fieldErrors","resolvedPrevious","fieldError","focus","resetRefs","reset","fieldsKeyValue","closest","getValues","outputValues","nest","formState","Proxy","prop","FormGlobalContext","useFormContext","FormContext","props","children","restMethods","Provider"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, createElement } from 'react';\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst RADIO_INPUT = 'radio';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (!ref.addEventListener) {\r\n        return;\r\n    }\r\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n    ref.addEventListener(EVENTS.BLUR, handleChange);\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst reIsPlainProp = /^\\w*$/;\r\nconst rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst reEscapeChar = /\\\\(\\\\)?/g;\r\nconst reIsUint = /^(?:0|[1-9]\\d*)$/;\r\nfunction isIndex(value) {\r\n    return reIsUint.test(value) && value > -1;\r\n}\r\nfunction isKey(value) {\r\n    if (isArray(value)) {\r\n        return false;\r\n    }\r\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value);\r\n}\r\nconst stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(rePropName, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\r\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : isIndex(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar combineFieldValues = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!!key.match(/\\[.+\\]/gi) || key.indexOf('.') > 0) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (!ref.removeEventListener) {\r\n        return;\r\n    }\r\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n};\n\nvar isRadioInput = (type) => type === RADIO_INPUT;\n\nvar isCheckBoxInput = (type) => type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, mutationWatcher } = field;\r\n    if (!ref.type || !fields[ref.name]) {\r\n        return;\r\n    }\r\n    const { name, type } = ref;\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref }, index) => {\r\n                const option = options[index];\r\n                if ((option && isDetached(ref)) || forceDelete) {\r\n                    const mutationWatcher = option.mutationWatcher;\r\n                    removeAllEventListeners(option, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    options.splice(index, 1);\r\n                }\r\n            });\r\n            if (options && !options.length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isMultipleSelect = (type) => type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { type, name, options, value, files } = ref;\r\n    const field = fields[name];\r\n    if (type === 'file') {\r\n        return files;\r\n    }\r\n    if (isRadioInput(type)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(type)) {\r\n        return getMultipleSelectValue(options);\r\n    }\r\n    if (isCheckBoxInput(type)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar getFieldsValues = (fields) => Object.values(fields).reduce((previous, { ref, ref: { name } }) => (Object.assign(Object.assign({}, previous), { [name]: getFieldValue(fields, ref) })), {});\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isSameError = (error, type, message) => isObject(error) && error.type === type && error.message === message;\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = error[name];\r\n    const existFieldError = errors[name];\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return (currentFieldError &&\r\n        !isSameError(existFieldError, currentFieldError.type, currentFieldError.message));\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isString = (value) => typeof value === 'string';\n\nvar displayNativeError = (nativeValidation, ref, message) => {\r\n    if (nativeValidation && isString(message)) {\r\n        ref.setCustomValidity(message);\r\n    }\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, nativeError, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        const error = {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n        nativeError(message);\r\n        return error;\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, nativeValidation, validateAllFieldCriteria, { ref, ref: { type, value, name, valueAsNumber, valueAsDate }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(type);\r\n    const isCheckBox = isCheckBoxInput(type);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const nativeError = displayNativeError.bind(null, nativeValidation, ref);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const message = isString(required)\r\n            ? required\r\n            : getValueAndMessage(required).message;\r\n        error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n        nativeError(message);\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number') {\r\n            const valueNumber = valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            const message = exceedMax ? maxMessage : minMessage;\r\n            error[name] = Object.assign({ type: exceedMax\r\n                    ? INPUT_VALIDATION_RULES.max\r\n                    : INPUT_VALIDATION_RULES.min, message,\r\n                ref }, (exceedMax\r\n                ? appendErrorsCurry(INPUT_VALIDATION_RULES.max, message)\r\n                : appendErrorsCurry(INPUT_VALIDATION_RULES.min, message)));\r\n            nativeError(message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n            error[name] = Object.assign({ type: exceedMax\r\n                    ? INPUT_VALIDATION_RULES.maxLength\r\n                    : INPUT_VALIDATION_RULES.minLength, message,\r\n                ref }, (exceedMax\r\n                ? appendErrorsCurry(INPUT_VALIDATION_RULES.maxLength, message)\r\n                : appendErrorsCurry(INPUT_VALIDATION_RULES.minLength, message)));\r\n            nativeError(message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            nativeError(patternMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef, nativeError);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, nativeError, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (nativeValidation) {\r\n        ref.setCustomValidity('');\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validationSchemaOption, validateAllFieldCriteria, data) {\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, validationSchemaOption),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: parseErrorSchema(e, validateAllFieldCriteria),\r\n        };\r\n    }\r\n}\n\nfunction attachNativeValidation(ref, rules) {\r\n    Object.entries(rules).forEach(([key, ruleValue]) => {\r\n        const { value } = getValueAndMessage(ruleValue);\r\n        if (key === INPUT_VALIDATION_RULES.pattern && isRegex(value)) {\r\n            ref[key] = value.source;\r\n        }\r\n        else {\r\n            ref[key] = key === INPUT_VALIDATION_RULES.pattern || value;\r\n        }\r\n    });\r\n}\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj ? defaultValue : result;\r\n};\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => isArray(values)\r\n    ? values.map((item, index) => {\r\n        const pathWithIndex = `${path}[${index}]`;\r\n        return isPrimitive(item) ? pathWithIndex : getPath(pathWithIndex, item);\r\n    })\r\n    : Object.entries(values).map(([key, objectValue]) => {\r\n        const pathWithKey = `${path}.${key}`;\r\n        return isPrimitive(objectValue)\r\n            ? pathWithKey\r\n            : getPath(pathWithKey, objectValue);\r\n    });\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        watchFields.add(fieldName);\r\n        value = fieldValues[fieldName];\r\n    }\r\n    else {\r\n        value = get(combineFieldValues(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar omitValidFields = (errorFields, validFieldNames) => Object.entries(errorFields).reduce((previous, [name, error]) => validFieldNames.some(validFieldName => validFieldName === name)\r\n    ? previous\r\n    : Object.assign(Object.assign({}, previous), { [name]: error }), {});\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst omitObject = (obj, key) => {\r\n    const _a = key, omitted = obj[_a], rest = __rest(obj, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\r\n    return rest;\r\n};\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, defaultValues = {}, nativeValidation = false, submitFocusError = true, validationSchemaOption = { abortEarly: false }, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef(new Set());\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChange = useRef();\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = !isWindowUndefined && 'Proxy' in window;\r\n    const readFormState = useRef({\r\n        dirty: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const validationSchemaOptionRef = useRef(validationSchemaOption);\r\n    defaultValuesRef.current = defaultValuesRef.current\r\n        ? defaultValuesRef.current\r\n        : defaultValues;\r\n    const combineErrorsRef = (data) => (Object.assign(Object.assign({}, errorsRef.current), data));\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const validateFieldCurry = useCallback(validateField.bind(null, fieldsRef, nativeValidation, validateAllFieldCriteria), []);\r\n    const validateFieldsSchemaCurry = useCallback(validateWithSchema.bind(null, validationSchema, validationSchemaOptionRef.current, validateAllFieldCriteria), [validationSchema]);\r\n    const renderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) || validationSchema) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || errorsRef.current[name];\r\n            }\r\n            errorsRef.current = omitObject(errorsRef.current, name);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !errorsRef.current[name];\r\n        }\r\n        errorsRef.current = combineErrorsRef(error);\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, validationSchema]);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const ref = field.ref;\r\n        const { type } = ref;\r\n        const options = field.options;\r\n        const value = isWeb &&\r\n            ref instanceof window.HTMLElement &&\r\n            isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(type) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isMultipleSelect(type)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(type) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name]) {\r\n            return false;\r\n        }\r\n        const isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        const isDirtyChanged = dirtyFieldsRef.current.has(name) !== isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = !!dirtyFieldsRef.current.size;\r\n        return isDirtyChanged && readFormState.current.dirty;\r\n    };\r\n    const setInternalValue = useCallback((name, value) => {\r\n        setFieldValue(name, value);\r\n        if (setDirty(name) ||\r\n            (!touchedFieldsRef.current.has(name) && readFormState.current.touched)) {\r\n            return !!touchedFieldsRef.current.add(name);\r\n        }\r\n    }, [setFieldValue]);\r\n    const executeValidation = useCallback(async ({ name, value, }, shouldRender, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        if (!isUndefined(value)) {\r\n            setInternalValue(name, value);\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        const error = await validateField(fieldsRef, nativeValidation, validateAllFieldCriteria, field);\r\n        renderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [\r\n        nativeValidation,\r\n        reRender,\r\n        renderBaseOnError,\r\n        setInternalValue,\r\n        validateAllFieldCriteria,\r\n    ]);\r\n    const executeSchemaValidation = useCallback(async (payload, shouldRender) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validationSchemaOptionRef.current, validateAllFieldCriteria, combineFieldValues(getFieldsValues(fieldsRef.current)));\r\n        const isMultipleFields = isArray(payload);\r\n        const names = isArray(payload)\r\n            ? payload.map(({ name }) => name)\r\n            : [payload.name];\r\n        const validFieldNames = names.filter(name => !errors[name]);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isMultipleFields) {\r\n            errorsRef.current = omitValidFields(combineErrorsRef(Object.entries(errors)\r\n                .filter(([key]) => names.includes(key))\r\n                .reduce((previous, [name, error]) => (Object.assign(Object.assign({}, previous), { [name]: error })), {})), validFieldNames);\r\n            reRender();\r\n        }\r\n        else {\r\n            const fieldName = names[0];\r\n            renderBaseOnError(fieldName, errors[fieldName]\r\n                ? { [fieldName]: errors[fieldName] }\r\n                : {}, shouldRender || previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [reRender, renderBaseOnError, validateAllFieldCriteria, validationSchema]);\r\n    const triggerValidation = useCallback(async (payload, shouldRender) => {\r\n        const fields = payload || Object.keys(fieldsRef.current).map(name => ({ name }));\r\n        if (validationSchema) {\r\n            return executeSchemaValidation(fields, shouldRender);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, false, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields, shouldRender);\r\n    }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\r\n    const setValue = useCallback((name, value, shouldValidate) => {\r\n        const shouldRender = setInternalValue(name, value) ||\r\n            isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name);\r\n        if (shouldValidate) {\r\n            return triggerValidation({ name }, shouldRender);\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        return;\r\n    }, [reRender, setInternalValue, triggerValidation]);\r\n    handleChange.current = handleChange.current\r\n        ? handleChange.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = errors[name];\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = (isOnSubmit && isReValidateOnSubmit) ||\r\n                (isOnSubmit && !isSubmittedRef.current) ||\r\n                (isOnBlur && !isBlurEvent && !currentError) ||\r\n                (isReValidateOnBlur && !isBlurEvent && currentError) ||\r\n                (isReValidateOnSubmit && currentError);\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isWatchAllRef.current ||\r\n                watchFieldsRef.current.has(name) ||\r\n                shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !touchedFieldsRef.current.has(name) &&\r\n                readFormState.current.touched) {\r\n                touchedFieldsRef.current.add(name);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (validationSchema) {\r\n                const { errors } = await validateWithSchema(validationSchema, validationSchemaOptionRef.current, validateAllFieldCriteria, combineFieldValues(getFieldsValues(fields)));\r\n                const validForm = isEmptyObject(errors);\r\n                error = (errors[name] ? { [name]: errors[name] } : {});\r\n                if (isValidRef.current !== validForm) {\r\n                    shouldUpdateState = true;\r\n                }\r\n                isValidRef.current = validForm;\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, nativeValidation, validateAllFieldCriteria, field);\r\n            }\r\n            if (!renderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback(() => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateFieldsSchemaCurry(combineFieldValues(fieldValues)).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid && previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, [reRender, validateFieldsSchemaCurry]);\r\n    const resetFieldRef = useCallback((name) => {\r\n        errorsRef.current = omitObject(errorsRef.current, name);\r\n        fieldsRef.current = omitObject(fieldsRef.current, name);\r\n        defaultRenderValuesRef.current = omitObject(defaultRenderValuesRef.current, name);\r\n        [\r\n            touchedFieldsRef,\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormState.current.isValid || readFormState.current.touched) {\r\n            reRender();\r\n        }\r\n        if (validationSchema) {\r\n            validateSchemaIsValid();\r\n        }\r\n    }, [reRender]);\r\n    const removeEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field) {\r\n            return;\r\n        }\r\n        if (!isUndefined(handleChange.current)) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChange.current, field, forceDelete);\r\n        }\r\n        resetFieldRef(field.ref.name);\r\n    }, [resetFieldRef]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            (isArray(name) ? name : [name]).forEach(fieldName => (errorsRef.current = omitObject(errorsRef.current, fieldName)));\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const errors = errorsRef.current;\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errors[name], type, message)) {\r\n            errors[name] = {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            };\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValues)\r\n                ? {}\r\n                : defaultValues\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isProxyEnabled) {\r\n            readFormState.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        return ((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValues);\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\r\n        let currentField = fields[name];\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeEventListenerAndRef(fieldAttributes));\r\n            if (isRadioOrCheckbox) {\r\n                currentField = Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions);\r\n            }\r\n            else {\r\n                currentField = Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n            }\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            const defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            if (!isUndefined(defaultValue)) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (validationSchema) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormState.current.isValid) {\r\n                validateFieldCurry(currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name]) {\r\n            defaultRenderValuesRef.current[name] = getFieldValue(fields, currentField.ref);\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        if (nativeValidation && validateOptions) {\r\n            attachNativeValidation(ref, validateOptions);\r\n        }\r\n        else {\r\n            attachEventListeners({\r\n                field: fieldToAttachListener,\r\n                isRadioOrCheckbox,\r\n                handleChange: handleChange.current,\r\n            });\r\n        }\r\n    }\r\n    function register(refOrValidateRule, validationOptions) {\r\n        if (isWindowUndefined || !refOrValidateRule) {\r\n            return;\r\n        }\r\n        if (validationOptions && isString(validationOptions.name)) {\r\n            registerFieldsRef({ name: validationOptions.name }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidateRule) && 'name' in refOrValidateRule) {\r\n            registerFieldsRef(refOrValidateRule, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidateRule);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormState.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (validationSchema) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateFieldsSchemaCurry(combineFieldValues(fieldValues));\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateFieldCurry(field);\r\n                    if (fieldError[name]) {\r\n                        resolvedPrevious.errors = Object.assign(Object.assign({}, resolvedPrevious.errors), fieldError);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(combineFieldValues(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError) {\r\n                    Object.keys(fieldErrors).reduce((previous, current) => {\r\n                        const field = fields[current];\r\n                        if (field && previous) {\r\n                            if (field.ref.focus) {\r\n                                field.ref.focus();\r\n                                return false;\r\n                            }\r\n                            else if (field.options) {\r\n                                field.options[0].ref.focus();\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return previous;\r\n                    }, true);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        reRender,\r\n        submitFocusError,\r\n        validateFieldCurry,\r\n        validateFieldsSchemaCurry,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        touchedFieldsRef.current = new Set();\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = useCallback((values) => {\r\n        const fieldsKeyValue = Object.entries(fieldsRef.current);\r\n        for (const [, value] of fieldsKeyValue) {\r\n            if (value && value.ref && value.ref.closest) {\r\n                try {\r\n                    value.ref.closest('form').reset();\r\n                    break;\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }\r\n        resetRefs();\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        reRender();\r\n    }, [reRender]);\r\n    const getValues = useCallback((payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValues\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? combineFieldValues(outputValues)\r\n            : outputValues;\r\n    }, [defaultValues]);\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeEventListenerAndRef(field, true));\r\n    }, [removeEventListenerAndRef]);\r\n    if (!validationSchema) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: [...touchedFieldsRef.current],\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isEmptyObject(fieldsRef.current) || isValidRef.current,\r\n    };\r\n    return {\r\n        register: useCallback(register, [\r\n            defaultRenderValuesRef.current,\r\n            defaultValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, [removeEventListenerAndRef]),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        handleSubmit,\r\n        watch,\r\n        reset,\r\n        setValue,\r\n        triggerValidation,\r\n        getValues,\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormState.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(props) {\r\n    const { children, formState, errors } = props, restMethods = __rest(props, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nexport default useForm;\nexport { FormContext, useFormContext };\n"]},"metadata":{},"sourceType":"module"}