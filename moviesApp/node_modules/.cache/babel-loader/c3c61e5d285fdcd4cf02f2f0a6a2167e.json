{"ast":null,"code":"// import React, { useEffect, createContext, useReducer } from \"react\";\n// // import { getMovies, getUpcomingMovies, getNowPlaying, getPopularMovies, getTopRatedMovies} from \"../api/tmdb-api\";\n// import { getMovies } from \"../api/movie-api\";\n// export const MoviesContext = createContext(null);\n// const reducer = (state, action) => {\n//   switch (action.type) {\n//     case \"add-favorite\":\n//       return {\n//         movies: state.movies.map((m) =>\n//           m.id === action.payload.movie.id ? { ...m, favorite: true } : m\n//         ),\n//         upcoming: [...state.upcoming],\n//         nowplaying: [...state.nowplaying],\n//         popular: [...state.popular],\n//         toprated: [...state.toprated],\n//       };\n//     case \"load\":\n//       return { movies: action.payload.movies, upcoming: [...state.upcoming], nowplaying: [...state.nowplaying], popular: [...state.popular], toprated: [...state.toprated]};\n//     case \"load-upcoming\":\n//       return { upcoming: action.payload.movies, movies: [...state.movies], nowplaying: [...state.nowplaying], popular: [...state.popular], toprated: [...state.toprated]};\n//     case \"load-nowplaying\":\n//       return { nowplaying: action.payload.movies, movies: [...state.movies], upcoming:[...state.upcoming], popular: [...state.popular], toprated: [...state.toprated]};\n//     case \"load-popular\":\n//       return { popular: action.payload.movies, movies: [...state.movies], upcoming:[...state.upcoming], nowplaying:[...state.nowplaying], toprated: [...state.toprated]};\n//     case \"load-toprated\":\n//       return { toprated: action.payload.movies, movies: [...state.movies], upcoming:[...state.upcoming], popular: [...state.popular], nowplaying:[...state.nowplaying]};\n//     case \"add-review\":\n//         return {\n//             movies: state.movies.map((m) =>\n//               m.id === action.payload.movie.id\n//                 ? { ...m, review: action.payload.review }\n//                 : m\n//             ),\n//           };\n//       break;\n//     default:\n//       return state;\n//   }\n// };\n// const MoviesContextProvider = (props) => {\n//   const [state, dispatch] = useReducer(reducer, { movies: [], upcoming: [], nowplaying: [], popular: [], toprated: [] });\n//   const addToFavorites = (movieId) => {\n//     const index = state.movies.map((m) => m.id).indexOf(movieId);\n//     dispatch({ type: \"add-favorite\", payload: { movie: state.movies[index] } });\n//   };\n//   const addReview = (movie, review) => {\n//     dispatch({ type: \"add-review\", payload: { movie, review } });\n//   };\n//   useEffect(() => {\n//     getMovies().then((movies) => {\n//       dispatch({ type: \"load\", payload: { movies } });\n//     });\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, []);\n//   // useEffect(() => {\n//   //   getUpcomingMovies().then((movies) => {\n//   //     dispatch({ type: \"load-upcoming\", payload: { movies } });\n//   //   });\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\n//   // }, []);\n//   // useEffect(() => {\n//   //   getNowPlaying().then((movies) => {\n//   //     dispatch({ type: \"load-nowplaying\", payload: { movies } });\n//   //   });\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\n//   // }, []);\n//   // useEffect(() => {\n//   //   getPopularMovies().then((movies) => {\n//   //     dispatch({ type: \"load-popular\", payload: { movies } });\n//   //   });\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\n//   // }, []);\n//   // useEffect(() => {\n//   //   getTopRatedMovies().then((movies) => {\n//   //     dispatch({ type: \"load-toprated\", payload: { movies } });\n//   //   });\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\n//   // }, []);\n//   return (\n//     <MoviesContext.Provider\n//       value={{\n//         movies: state.movies,\n//         upcoming: state.upcoming,\n//         nowplaying: state.nowplaying,\n//         popular: state.popular,\n//         toprated: state.toprated,\n//         favorites: state.favorites,\n//         addToFavorites: addToFavorites,\n//         addReview: addReview,\n//       }}\n//     >\n//       {props.children}\n//     </MoviesContext.Provider>\n//   );\n// };\n// export default MoviesContextProvider;","map":{"version":3,"sources":["C:/Users/vblas/Desktop/COLLEGE/Year 3/Web App 2/wad2-Assignment2/moviesApp/src/contexts/moviesContext.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useEffect, createContext, useReducer } from \"react\";\r\n// // import { getMovies, getUpcomingMovies, getNowPlaying, getPopularMovies, getTopRatedMovies} from \"../api/tmdb-api\";\r\n// import { getMovies } from \"../api/movie-api\";\r\n\r\n\r\n// export const MoviesContext = createContext(null);\r\n\r\n// const reducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case \"add-favorite\":\r\n//       return {\r\n//         movies: state.movies.map((m) =>\r\n//           m.id === action.payload.movie.id ? { ...m, favorite: true } : m\r\n//         ),\r\n//         upcoming: [...state.upcoming],\r\n//         nowplaying: [...state.nowplaying],\r\n//         popular: [...state.popular],\r\n//         toprated: [...state.toprated],\r\n//       };\r\n//     case \"load\":\r\n//       return { movies: action.payload.movies, upcoming: [...state.upcoming], nowplaying: [...state.nowplaying], popular: [...state.popular], toprated: [...state.toprated]};\r\n//     case \"load-upcoming\":\r\n//       return { upcoming: action.payload.movies, movies: [...state.movies], nowplaying: [...state.nowplaying], popular: [...state.popular], toprated: [...state.toprated]};\r\n//     case \"load-nowplaying\":\r\n//       return { nowplaying: action.payload.movies, movies: [...state.movies], upcoming:[...state.upcoming], popular: [...state.popular], toprated: [...state.toprated]};\r\n//     case \"load-popular\":\r\n//       return { popular: action.payload.movies, movies: [...state.movies], upcoming:[...state.upcoming], nowplaying:[...state.nowplaying], toprated: [...state.toprated]};\r\n//     case \"load-toprated\":\r\n//       return { toprated: action.payload.movies, movies: [...state.movies], upcoming:[...state.upcoming], popular: [...state.popular], nowplaying:[...state.nowplaying]};\r\n//     case \"add-review\":\r\n//         return {\r\n//             movies: state.movies.map((m) =>\r\n//               m.id === action.payload.movie.id\r\n//                 ? { ...m, review: action.payload.review }\r\n//                 : m\r\n//             ),\r\n//           };\r\n//       break;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const MoviesContextProvider = (props) => {\r\n//   const [state, dispatch] = useReducer(reducer, { movies: [], upcoming: [], nowplaying: [], popular: [], toprated: [] });\r\n\r\n//   const addToFavorites = (movieId) => {\r\n//     const index = state.movies.map((m) => m.id).indexOf(movieId);\r\n//     dispatch({ type: \"add-favorite\", payload: { movie: state.movies[index] } });\r\n//   };\r\n\r\n//   const addReview = (movie, review) => {\r\n//     dispatch({ type: \"add-review\", payload: { movie, review } });\r\n//   };\r\n//   useEffect(() => {\r\n//     getMovies().then((movies) => {\r\n//       dispatch({ type: \"load\", payload: { movies } });\r\n//     });\r\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   }, []);\r\n\r\n//   // useEffect(() => {\r\n//   //   getUpcomingMovies().then((movies) => {\r\n//   //     dispatch({ type: \"load-upcoming\", payload: { movies } });\r\n//   //   });\r\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   // }, []);\r\n\r\n//   // useEffect(() => {\r\n//   //   getNowPlaying().then((movies) => {\r\n//   //     dispatch({ type: \"load-nowplaying\", payload: { movies } });\r\n//   //   });\r\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   // }, []);\r\n\r\n//   // useEffect(() => {\r\n//   //   getPopularMovies().then((movies) => {\r\n//   //     dispatch({ type: \"load-popular\", payload: { movies } });\r\n//   //   });\r\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   // }, []);\r\n\r\n//   // useEffect(() => {\r\n//   //   getTopRatedMovies().then((movies) => {\r\n//   //     dispatch({ type: \"load-toprated\", payload: { movies } });\r\n//   //   });\r\n//   //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   // }, []);\r\n\r\n//   return (\r\n//     <MoviesContext.Provider\r\n//       value={{\r\n//         movies: state.movies,\r\n//         upcoming: state.upcoming,\r\n//         nowplaying: state.nowplaying,\r\n//         popular: state.popular,\r\n//         toprated: state.toprated,\r\n//         favorites: state.favorites,\r\n//         addToFavorites: addToFavorites,\r\n//         addReview: addReview,\r\n//       }}\r\n//     >\r\n//       {props.children}\r\n//     </MoviesContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default MoviesContextProvider;"]},"metadata":{},"sourceType":"module"}