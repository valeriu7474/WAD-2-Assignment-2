{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vblas\\\\Desktop\\\\COLLEGE\\\\Year 3\\\\Web App 2\\\\wad2-Assignment2\\\\reactApp\\\\src\\\\sample\\\\authContext.js\";\nimport React, { useState, createContext } from \"react\";\nimport { login, signup } from \"../api/movie-api\";\nexport const AuthContext = createContext(null);\n\nconst AuthContextProvider = props => {\n  const existingToken = localStorage.getItem(\"token\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState(existingToken);\n  const [userName, setUserName] = useState(\"\"); //Function to put JWT token in local storage.\n\n  const setToken = data => {\n    localStorage.setItem(\"token\", data);\n    setAuthToken(data);\n  };\n\n  const authenticate = async (username, password) => {\n    const result = await login(username, password);\n\n    if (result.token) {\n      setToken(result.token);\n      setIsAuthenticated(true);\n      setUserName(username);\n    }\n  };\n\n  const register = async (username, password) => {\n    const result = await signup(username, password);\n    console.log(result.code);\n    return result.code == 201 ? true : false;\n  };\n\n  const signout = () => {\n    setTimeout(() => setIsAuthenticated(false), 100);\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      authenticate,\n      register,\n      signout,\n      userName\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default AuthContextProvider;","map":{"version":3,"sources":["C:/Users/vblas/Desktop/COLLEGE/Year 3/Web App 2/wad2-Assignment2/reactApp/src/sample/authContext.js"],"names":["React","useState","createContext","login","signup","AuthContext","AuthContextProvider","props","existingToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","authToken","setAuthToken","userName","setUserName","setToken","data","setItem","authenticate","username","password","result","token","register","console","log","code","signout","setTimeout","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AAEA,OAAO,MAAMC,WAAW,GAAGH,aAAa,CAAC,IAAD,CAAjC;;AAEP,MAAMI,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAtB;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACO,aAAD,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC,CAJqC,CAMrC;;AACA,QAAMgB,QAAQ,GAAIC,IAAD,IAAU;AACzBT,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BD,IAA9B;AACAJ,IAAAA,YAAY,CAACI,IAAD,CAAZ;AACD,GAHD;;AAKA,QAAME,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjD,UAAMC,MAAM,GAAG,MAAMpB,KAAK,CAACkB,QAAD,EAAWC,QAAX,CAA1B;;AACA,QAAIC,MAAM,CAACC,KAAX,EAAkB;AAChBP,MAAAA,QAAQ,CAACM,MAAM,CAACC,KAAR,CAAR;AACAZ,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAI,MAAAA,WAAW,CAACK,QAAD,CAAX;AACD;AACF,GAPD;;AASA,QAAMI,QAAQ,GAAG,OAAOJ,QAAP,EAAiBC,QAAjB,KAA8B;AAC7C,UAAMC,MAAM,GAAG,MAAMnB,MAAM,CAACiB,QAAD,EAAWC,QAAX,CAA3B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,IAAnB;AACA,WAAQL,MAAM,CAACK,IAAP,IAAe,GAAhB,GAAuB,IAAvB,GAA8B,KAArC;AACD,GAJD;;AAMA,QAAMC,OAAO,GAAG,MAAM;AACpBC,IAAAA,UAAU,CAAC,MAAMlB,kBAAkB,CAAC,KAAD,CAAzB,EAAkC,GAAlC,CAAV;AACD,GAFD;;AAIA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,eADK;AAELS,MAAAA,YAFK;AAGLK,MAAAA,QAHK;AAILI,MAAAA,OAJK;AAKLd,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGR,KAAK,CAACwB,QATT,CADF;AAaD,CA5CD;;AA8CA,eAAezB,mBAAf","sourcesContent":["import React, { useState, createContext } from \"react\";\nimport { login, signup } from \"../api/movie-api\";\n\nexport const AuthContext = createContext(null);\n\nconst AuthContextProvider = (props) => {\n  const existingToken = localStorage.getItem(\"token\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState(existingToken);\n  const [userName, setUserName] = useState(\"\");\n\n  //Function to put JWT token in local storage.\n  const setToken = (data) => {\n    localStorage.setItem(\"token\", data);\n    setAuthToken(data);\n  }\n\n  const authenticate = async (username, password) => {\n    const result = await login(username, password);\n    if (result.token) {\n      setToken(result.token)\n      setIsAuthenticated(true);\n      setUserName(username);\n    }\n  };\n\n  const register = async (username, password) => {\n    const result = await signup(username, password);\n    console.log(result.code);\n    return (result.code == 201) ? true : false;\n  };\n\n  const signout = () => {\n    setTimeout(() => setIsAuthenticated(false), 100);\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        authenticate,\n        register,\n        signout,\n        userName\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContextProvider;"]},"metadata":{},"sourceType":"module"}